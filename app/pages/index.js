import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bootstrap/dist/css/bootstrap.min.css';
import {useState, useEffect} from "react";
import * as anchor from "@project-serum/anchor";
import { Program, Provider } from "@project-serum/anchor";
import { Connection, PublicKey } from '@solana/web3.js'
import * as web3 from '@solana/web3.js';
import {Quilt} from "./idl/quilt";
import idl from "../src/idl.json";

const opts = {
  preflightCommitment: "processed"
}

async function connectWallet(){

  const network = "https://solana-devnet.g.alchemy.com/v2/lhsA_fYDYJ8rZYIasrLAgVHRzn0PP-EM";
  let provider = new Connection(network,opts)
  let connection = new web3.Connection(network,'confirmed');

  const program = 
  console.log("connection : ",connection)

  let address = ""

    if(window.solana){
      let response = await window.solana.connect()
      console.log('address',response.publicKey.toString())
      address = response.publicKey
    }

    console.log("Balance : ",await provider.getBalance(address))

}
const getProvider = () => {
  if ('phantom' in window) {
    const provider = window.phantom?.solana;

    if (provider?.isPhantom) {
      return provider;
    }
  }

  window.open('https://phantom.app/', '_blank');
};

async function transaction(){
    console.log("transaction init")
    
    
    const network = "https://solana-devnet.g.alchemy.com/v2/lhsA_fYDYJ8rZYIasrLAgVHRzn0PP-EM";
    let connection = new web3.Connection(network,'confirmed');
  
    let toAccount = new PublicKey('5aFNdKTs6rjLvxQbHv1LT9NvHkzKB4LBbBdj7AvsMHgE')
    let provider = getProvider()
    let recentBlockhash = await connection.getLatestBlockhash()
    const programId = new PublicKey(idl.metadata.address)

    const program = new Program(idl,programId,connection)

    // finding the PDA of account for program
    const [pointPDA,_] = await PublicKey.findProgramAddress(
      [
        anchor.utils.bytes.utf8.encode("point"),
        provider.publicKey.toBuffer()
      ],
      programId
    )

    try{


        let txn = await program.methods.createUser("Ajay","Ajay").accounts({
          user: provider.publicKey,
          point : pointPDA
        })
        .rpc()
        
    }
    catch(err){
      console.log(err)
    }
    console.log("PDA : ",pointPDA)
  
    console.log("transaction ended")

}


export default function Home() {

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Quilt!</a>
        </h1>


        <div>
          <div className='conatiner'>
            <div className='row'>
              <div className='col-sm'>
              <button type="button" className="btn btn-primary" onClick={connectWallet}>Connect</button>
              </div>

              <div className='col'>
              <button type="button" className="btn btn-warning" onClick={transaction}>Make Transaction</button>
              </div>
            </div>
        </div>
          </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
